createdAt: "2018-03-01T07:00:29.439Z"
updatedAt: "2018-03-04T05:06:11.811Z"
type: "MARKDOWN_NOTE"
folder: "aeae1f50d1814c94c245"
title: "応用構文"
content: '''
  # 応用構文
  
  ## type
  Goでは既存の型を拡張した独自の型を定義できる
  ```go
  type ID int
  type Priority int
  
  func ProcessTask(id ID, priority Priority) {
    fmt.Println(id, priority)
  }
  
  var id ID = 3
  var priority Priority = 5
  ProcessTask(priority, id) // コンパイルエラー
  ```
  これを利用することで堅牢なプログラムを作成でき、IDEからのサポート、リファクタリングもしやすくなる。
  
  ## 構造体(struct)
  構造体は複数のデータを一つにまとめるのが基本的な役割だが、メソッドを持つことができ、`Ruby`や`Java`でのクラスに近い役割を持てる。
  
  ```go
  type Task struct {
    ID int
    Detail string
    done bool
  }
  ```
  各フィールドの可視性は名前で決まり、大文字で始まればパブリック、小文字で始まればパッケージ内のスコープとなる。
  
  ### 値の生成
  
  ```go
  func main() {
  	var task Task = Task{
  		ID: 1,  // カンマに注意
  		Detail: "Detail",
  		done: false,
  	}
  	fmt.Println(task.ID)
  	fmt.Println(task.Detail)
  	fmt.Println(task.done)
  }
  ```
  構造体に定義した順でパラメータを渡すことで、フィールド名を省略することもできる。
  ```go
  func main() {
    var task Task = Task{
  		1, "Detail", false,
  	}
  }
  ```
  構造体の生成時に値を明示的に指定しなかった場合はゼロ値で初期化される。
  
  ### ポインタ型
  構造体もポインタ型で扱うことができる。
  ```go
  var task *Task = &Task{} // 宣言
  
  func Finish(task *Task) { // 関数の引数
    task.done = true
  }
  ```
  
  ### new()
  構造体は組み込み関数の`new()`を用いて初期化することもできる。
  `new()`は構造体のフィールドをゼロ値で初期化し、そのポインタを返す。
  ```go
  func main() {
    var task *Task = new(Task)
    task.ID = 1
    task.Detail = "Detail"
    fmt.Println(task.done)
  }
  ```
  
  ### コンストラクタ
  Goではコンストラクタに当たる構造が存在しない。
  その代わりに`New`で始まる関数を定義し、その内部で構造体を生成するのが通例。
  ```go
  func NewTask(id int, detail string) *Task {
  	task := &Task{
  		ID:id,
  		Detail:detail,
  		done:false,
  	}
  
  	return task
  }
  
  func main() {
  	task := NewTask(1, "Detail")
  	fmt.Printf("%+v", task)
  }
  ```
  
  ### メソッド
  メソッド内にレシーバとして渡されるのはコピーのため、中身を変更したければ、ポインタとして受け取るようにしなければ。
  ```go
  func (task Task) Print() string {
  	str := fmt.Sprintf("%d) %s", task.ID, task.Detail)
  	return str
  }
  
  func (task *Task) Finish() {
    task.done = true
  }
  
  func main() {
  	task := NewTask(1, "Detail")
  	fmt.Printf("%+v", task.Print())
  }
  ```
  
  ## インターフェース
  Goでのインターフェースは、その型がどのようなメソッドを実装するべきかを規定する役割をもつ
  ```go
  type Stringer interface {
    String() string
  }
  ```
  インターフェースの名前は、実装すべき関数名が単純な場合は、その関数名に`er`を付け加えた名前を付ける習慣がある。よって`String()`を実装するインターフェースは`Stringer`となる。
  
  ### インターフェースの実装
  Goでは、`java`の`implements`構文のように、インターフェースを実装していることを明示的に宣言する構文はない。Goでは型がインターフェースに定義されたメソッドを実装していれば、インターフェース満たしているとする。
  ```go
  func Print(stringer Stringer) {
  	fmt.Print(stringer.String())
  }
  
  Print(task)
  ```
  `Stringer`は標準インターフェースであり、他にも代表的な標準インターフェースが存在する。
  
  ### interface{}
  ```go
  type Any interface {
  }
  ```
  上記のインターフェースは実装すべきメソッドを指定していない、よって全ての型はこのインターフェースを実装していることとなる。
  これを利用すると、次のようにどんな型も受け取ることができる関数を定義できる。
  ```go
  func Do(e Any) {
    // 処理
  }
  ```
  また`Any`のように定義しなくても、下記のように直接記述できる。
  ```go
  func Do(e interface{}) {
    // 処理
  }
  ```
  例えば`fmt.Println()`などのプリント関数はこれを用いている。
  ```go
  func Println(a ...interface{}) (n int, err error)
  ```
  
  ## 型の埋め込み
  Goでは、継承はサポートされていない。
  代わりに他の型を **「埋め込む」(Embed)** という方式で構造体やインターフェースの振る舞いを拡張できる。
  ```go
  type User struct {
  	FirstName string
  	LastName string
  }
  
  func (u *User) FullName() string {
  	fullName := fmt.Sprintf("%s %s", u.FirstName, u.LastName)
  	return fullName
  }
  
  func NewUser(firstName, lastName string) *User {
  	return &User {
  		FirstName:firstName,
  		LastName:lastName,
  	}
  }
  
  type Task struct {
  	ID int
  	Detail string
  	done bool
  	*User
  }
  
  func NewTask(id int, detail, firstName, lastName string) *Task {
  	task := &Task{
  		ID:id,
  		Detail:detail,
  		done:false,
  		User: NewUser(firstName, lastName),
  	}
  
  	return task
  }
  
  func main() {
  	task := NewTask(1, "buy the milk", "大悟", "中山")
  	fmt.Println(task.FirstName)
  	fmt.Println(task.LastName)
  	fmt.Println(task.FullName())
  	fmt.Println(task.User)
  }
  
  ```
  ### インターフェースの埋め込み
  インタフェースの埋め込みも可能であり、主な用途として複数のインタフェースを埋め込んで新たなインタフェースを定義することがある。
  `io`パッケージでは`Reader`、`Writer`といったインタフェースが定義されている。
  ```go
  type Reader interface {
    Read(p []byte) (n int, err error)
  }
  
  type Writer interface {
    Write(p []byte) (n int, err error)
  }
  ```
  この時、`Read()`と`Write()`を両方定義したインタフェースである`ReadWriter`は次のように定義できる。
  ```go
  type ReadWriter interface {
    Reader
    Writer
  }
  ```
  `io`パッケージには同様に、`Closer`インタフェースを埋め込んだ`ReadCloser`、`WriteCloser`、`ReadWriter Closer`なども定義されている。
  
  ## 型の変換(キャスト)
  Goでは暗黙的な型変換が起こることはない。しかし型を変換できないわけではなく、明示的に変換する方法がいくつか提供されている。
  ```go
  var i unit8 = 3
  var j unit32 = unit32(i) // unit8 -> unit32
  
  var s string = "abc"
  var b []byte = []byte(s) // string -> []byte
  fmt.Println(b) // [97 98 99]
  
  // 以下の型変換はできない
  a := int("a")
  ```
  キャストに失敗した場合はパニックが発生する。
  
  ### 型の検査
  インタフェース値が指定した型であるかを調べるには`Type Assertion`を使用します。
  ```go
  func Print(value interface{}) {
    s, ok := value.(string) // Type Assertion
    if ok {
      fmt.Print("ok")    
    } else {
      fmt.Print("no")
    }
  }
  ```
  判定に失敗するとパニックが発生する。
  
  ### 型による分岐
  `Type Assertion`は単一の型に対する検査しかできないが、`Type Switch`を使うと複数の型に対する検査を実行できる。
  ```go
  type Stringer interface {
    String() string
  }
  
  func Print(value interface{}) {
    switch v := value.(type) {
    case string:
      fmt.Print("value is string")
    case int:
      fmt.Print("value is int")
    case Stringer:
      fmt.Printf("value is Stringer")
    } 
  }
  ```
  
  
  
  
  
  
  
  
  
  
  
  
'''
tags: []
isStarred: false
isTrashed: false
