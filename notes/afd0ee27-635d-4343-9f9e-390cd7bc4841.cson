createdAt: "2018-04-13T02:10:28.889Z"
updatedAt: "2018-05-11T05:37:29.907Z"
type: "MARKDOWN_NOTE"
folder: "681ce933dcb605096030"
title: "オペレーティング・システム"
content: '''
  # オペレーティング・システム
  期末試験あり
  
  # 第一回(OSの概要)
  最初のOSはIBM製の`OS/360(1964年)`であり、`OS/370`,`OS/390`と発展。
  OSは基本ソフトウェアに含まれる。狭義では制御OS。
  OSが優秀でないとハードウェアの性能を活かしきれない。
  
  ## カーネル
  OSの基本機能を実行するプログラム
  ### モノリシックカーネル
  全ての機能をカーネルに搭載する。
  現在はこちらが主流。
  ### マイクロカーネル
  プロセス管理とメモリ管理などの最小限の機能に限定したカーネル。
  
  ## API
  OSが自身の機能の一部を他のプログラムで利用できるように公開されている。
  意味はWebAPIなどと同じ。
  
  ## UNIX
  UNIXは、カーネルとシェルで構成。
  
  ---
  
  # 第二回(プロセスの制御)
  - プロセス管理の目的は、**CPUを効率的に使用する**こと
  - そのために**マルチプログラミング**を行なっている
  
  ## マルチプログラミング
  メモリ上に複数のプロセスを置き、実行中のプロセスが**待ち状態**になったら、**別の**プロセスにCPUを割り当て実行プロセスを切り替える。
  
  ### メリット
  - CPUの空き時間を減らし、利用率を向上させる
  - CPUが一つのコンピュータでも、複数のコンピュータでも実現できる。
  
  ## プロセス生成の方法
  1. ユーザからの指令に伴い、OSがプロセスを生成する。
  2. 実行状態のプロセスが新しいプロセスを生成する。
  
  ## プロセスの階層構造
  - 子プロセスは一つの親プロセスを持つ
  - 親プロセスは複数の子プロセスを持つことができる
  - プロセスは孫、子、親の順で終了する
  
  ## UNIXにおけるプロセス生成
  1. 親プロセスが*forkシステムコール*によって、子プロセスを生成
  2. 子プロセスはforkの次の命令から、親プロセスと並行して実行
  
  ## プロセス生成によって起こること
  OSがそのプロセスの**PCB**と**アドレス空間**を作る。
  
  ### PCB(Process Control Block)
  OSの領域に作成され、プロセスの状態を刻々と記録している
  - プロセスのID、状態、優先度、次のPCBへのポインタ
  - 割り当てられている入出力装置の情報
  - レジスタ、プログラムカウンタの値の退避領域
  
  ### アドレス空間
  - 実行形式のプログラム全体を配置する領域
  - 仮想記憶システムでは、主記憶に制約されない論理的なアドレス空間
  
  ## コンテキストスイッチ
  CPUに与えるプロセスを切り替える際に行われる
  
  1. CPUを奪われるプロセスのPCBにレジスタ、プログラムカウンタの値を退避する
  2. CPUを与えるプロセスのPCBの退避域の値をレジスタ、プログラムカウンタに設定する
  
  ## プロセス切り替えの方式
  ### イベントドリブン(事象駆動)
  - イベントをトリガーとしてプロセスを切り替える
  - マルチプログラミングを行うのに必須
  
  ### タイムスライシング
  - システムの状態変化とは無関係に、設定したい短い時間の周期でプロセスを切り替える
  - TSSの実現に必須
  
  # 第三回 プロセスの状態
  ディスパッチャ・・・CPUの割り当て実行状態に遷移
  プリエンプション・・・CPUの手放し実行可能状態に遷移
  - 実行可能状態
    - この状態のプロセスは一般に複数個存在し、待ち行列を形成
  - 実行状態
    - この状態のプロセス数はCPU数以下
  - 待ち状態
    - 入出力処理中やメッセージの到着待ちなど
  
  ## プロセスの休止
  ３つの状態の他に**休止状態**が存在する。
  - プロセスが長時間の待ち状態になると休止状態になる
    - UNIX系では20秒
  - システムが過負荷状態に陥った時
  - システム障害が発生した
  
  ## プロセスのスケジュール
  - CPUスケジューラ
    - 実行可能状態のプロセス群の中から、CPUを割与えるプロセスを基準に応じて決定する
  - ディスパッチャ
    - スケジューラが選んだプロセスにCPUを割り当て
    - コンテキストスイッチを行う
  
  ## プロセスの特性
  - CPUバウンドプロセス
    - 処理時間の中で、CPU時間の占める割合が大きい
    - 科学技術計算、プラントの時間制御システム
  
  - 入出力バウンドプロセス
    - 処理時間の中で入出力時間の占める割合の大きい
    - 事務処理、オンライントランザクション処理
  
  CPUバウンドとI/Oバウンドを並行して処理する場合、**I/Oバウンドのプロセスに優先**してCPUを与える
  
  ## スケジューリングの評価尺度
  - ターンアラウンドタイム
    - プロセスが活動を開始してから終わるまでの時間
    - オンライン処理では応答時間
    - TATや応答時間は短い程良い
  - 待ち時間
    - CPU待ち時間、入出力待ち時間、事象待ち時間
    - 待ち時間は短い程良い
  
  - スループット
    - 単位時間にこなせる仕事量
    - コンピュータの処理能力
    - リソースを遊ばせずに働かせる必要がある
  - CPU利用率
    - CPUが遊ばれずに動作していた時間の割合
  
  - バッチ処理
    - TAT, スループット重視
  - オンラインリアルタイム処理
    - 応答時間の平均を重視
  - TSS（対話型システム）
    - 応答時間の偏りを最小化
  
  
  
  
  
  
  
  
  
'''
tags: []
isStarred: false
isTrashed: false
