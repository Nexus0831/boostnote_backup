createdAt: "2018-04-13T10:45:37.738Z"
updatedAt: "2018-04-24T05:38:32.476Z"
type: "MARKDOWN_NOTE"
folder: "1c46d39ad9f3cb432f79"
title: "基本構文"
content: '''
  # 基本構文
  
  ## 文字列
  `'`または`"`で囲む。
  ```php
  <?php
    'Hello'
    "Hello"
  ?>
  ```
  ### ヒアドキュメント
  複数の文字列の作成に利用する。
  `ID`の部分には任意の文字列が指定できる。
  ```PHP
  <?php
    <<< ID
    Hello
    World
    !
    ID
  ?>
  ```
  
  ### 文字列の連結
  `.`で繋げる。
  ```php
  <?php
    'Hello'.'World';
  ?>
  ```
  
  ### 文字列の出力
  #### echo
  複数の文字列を続けて出力する。
  ```PHP
  <?php
    echo 'Hello', 'World', '!';
  ?>
  ```
  
  #### print
  `echo`と違い複数の引数しか持たない。
  ```PHP
  <?php
    print 'Hello World!'
  ?>
  ```
  
  ### エスケープシーケンス
  他の言語と同じように`\\`でエスケープ。
  
  ### 文字列の中での式展開
  `"`クォーテーションで囲んで定義した場合やヒアドキュメントでは文字列の中で変数を記述できる。
  要は`Ruby`と同じ。
  ```PHP
  <?php
    $name = '前納';
    echo "こんにちは$nameさん"
  ?>
  ```
  
  ----
  
  ## 変数
  - `$`で始まる英数字もしくは`_`。
  - 最初の文字は数字以外、英数字が望ましい。
  - 大文字小文字を区別する。
  - 型宣言は不要
  - 文字列の中に数字を埋め込める。
  
  ```PHP
  <?php
    $message = "どうも、PHP!";
    echo("<h1>".$message."</h1>");
  ?>
  ```
  
  ### 初期化とNULL
  初期化された変数には`NULL`が格納される。
  NULLは大文字、小文字を区別しない。
  
  ### 変数を参照
  ```PHP
  <?php
    $num1 = 320;
    $num2 =& $num1;
  ?>
  ```
  上記の方法で変数を参照すると、左辺の変数名が右辺の変数のエイリアス(別名)になる。
  `num1`の中身を変更すると、必然的に`num2`の値もかわる。
  
  ### 定数
  `define`を使用して宣言。
  変数と違い`$`の必要はない。
  ```PHP
  <?php
    define("TAX", 0.08);
    echo TAX;
  ?>
  ```
  
  ## キャスト(型変換)
  ```PHP
  $intDate = (int)"12";
  ```
  
  ----
  
  ## 配列
  ```PHP
  <?php
    $kcg = array("鴨川", "京都駅前", "洛北");
    echo("<h1>".$kcg[0]."</h1>");
  ?>
  ```
  
  ----
  
  ### 多次元配列
  ```php
  <?php
    $odd = array(1, 3, 5, 7, 9);
    $even = array(2, 4, 6, 8);
    $nums = array($odd, $even);
  ?>
  ```
  
  ## 連想配列
  ```PHP
  <?php
    $kcg = array("e"=>"鴨川", "k"=>"京都駅前", "r"=>"洛北");
    $kcg["s"] = "白川"; // 追加
    echo("<h1>".$kcg["k"]."</h1>");
  ?>
  ```
  
  ----
  
  ## 乱数
  `rand()`を使用する。
  第一引数にはランダムに生成したい範囲の最小値。
  第二引数にはランダムに生成したい範囲の最大値。
  ```PHP
  <?php
    echo rand(0, 2);
  ?>
  ```
  
  ----
  
  ## 現在の年月日を取得する
  `getdate()`を利用して連想配列で取得する。
  年を取得したい場合は`year`。
  月を取得したい場合は`mon`。
  日を取得したい場合は`mday`。
  ```PHP
  <?php
    $now = getdate();
    echo($now["year"]."年".$now["mon"]."月".$now["mday"]."日");
  ?>
  ```
  
  ----
  
  ## 条件分岐
  `Java`と同じ
  
  ---
  
  ## 繰り返し
  ほとんど`Java`と同じ、違うものだけ特記する。
  
  ### foreach（配列）
  `Java`の拡張for文と同じ
  ```php
  <?php
    $nums = array(1, 2, 3);
    foreach ($nums as $num) {
      print $num;
    }
    
    # 配列の値を変更したい場合
    foreach ($nums as &$num) {
      $num += 1;
    }
  ?>
  ```
  
  ### foreach（連想配列）
  ```php
  <?php
    $pref_list = array('Tokyo' => '東京', 'Osaka' => '大阪');
    
    foreach ($pref_list as $key => $value) {
      print $key.'=>'.$value;
    }
  ?>
  ```
  
  ---
  
  ## 関数
  ```php
  <?php
    function add($x, $y) {
      return $x + $y;
    }
  ?>
  ```
  
  ----
  
  ## クラス
  ```php
  <?php
    class Car {
    }
    
    $car = new Car();
  ?>
  ```
  
  ### メンバ変数とメンバメソッド
  ```php
  <?php
    class Car {
      public $car_name;
      
      function disp_name($name) {
        $this->car_name = $name;
        print $this->carname; # クラス内でメンバ変数にアクセス
      }
    }
    
    $car = new Car();
    $car->car_name = 'ベンツ'; # メンバ変数にアクセス
    $car->disp_name('セダン'); # メンバメソッドを実行
  ?>
  ```
  
  ### アクセス装飾子
  |アクセス装飾子|アクセス権|
  |---|---|
  |`public`|クラス内外どこからでもアクセス可能|
  |`private`|同じクラス内からのみアクセス可能|
  |`protected`|同じクラス、サブクラスからアクセス可能|
  
  ### クラス内の定数
  クラス内で定数を宣言するには`const`を使う
  - selfはオブジェクトごとではなくクラスごとのアクセスに使う。
  ```php
  <?php
    class Car() {
      const TYPE = 'スポーツカー';
      
      function disp_type() {
        print self::TYPE;
      }
    }
  ?>
  ```
  
  ### コンストラクタ
  ```php
  <?php
    function __construct($name) {
      $this->car_name = $name;
    }
  ?>
  ```
  
  
  
  
  
  
  
  
'''
tags: [
  "構文"
]
isStarred: false
isTrashed: false
