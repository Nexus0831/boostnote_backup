createdAt: "2018-04-29T01:45:44.226Z"
updatedAt: "2018-04-29T02:55:56.581Z"
type: "MARKDOWN_NOTE"
folder: "6e8d84390952ff1cf5bc"
title: "正規表現"
content: '''
  # 正規表現
  
  ## 簡単な利用方
  ```ruby
  str = 'Hello'
  
  if /e.+o/ =~ str then
    print('eで始まりoで終わる文字列が含まれる')
  else
    print('eで始まりoで終わる文字列がない')
  end
  ```
  正規表現オブジェクトは`/abc/`で宣言
  
  ## Regexpクラス
  - 第一引数はパターン文字列
  - 第二引数は修飾子を指定
  - 第三引数は文字コード
  ```ruby
  Regexp.new('abc')
  ```
  
  ## エスケープ
  `\\`でエスケープ。
  ```ruby
  Regexp.escape('a[b]c') # 第一引数に文字列
  ```
  
  ## %rを使った定義
  `//`を使った定義ではパターン中の`/`を都度エスケープしなければならない。
  その手間を省くために`%r`による定義を使う。
  
  ```ruby
  %r{パターン}
  %r[パターン]
  %r(パターン)
  %r<パターン>
  %r|パターン|
  %r!パターン!
  %r*パターン*
  ```
  
  ## 位置の指定
  |パターン文字|意味|
  |---|---|
  |`^`|行の先頭|
  |`$`|行の末尾|
  |`\\A`|文字列の先頭|
  |`\\Z or \\z`|文字列の末尾|
  |`^$`|先頭と末尾を合わせて|
  
  ## 任意の文字列と繰り返し
  - 繰り返しのマッチは一番長い文字列にマッチングする。
  - マッチの範囲を最小にするときは各メタ文字の後ろに`?`を付けて使用する。
  |メタ文字|意味|
  |---|---|
  |`.`|ドットが置かれた位置の任意の一文字にマッチングする|
  |`*`|直前の文字を0回以上繰り返し|
  |`+`|直前の文字を1回以上繰り返し|
  |`?`|直前の文字を0回か1回|
  |`{min, max}`|直前の文字を指定した範囲の回数繰り返し|
  |`{min, }`|直前の文字が`min`以上繰り返し|
  |`{num}`|直前の文字が指定した回数繰り返し|
  |`(複数の文字)メタ文字`|グループ化して複数の文字を繰り返す|
  |`.+`|任意の文字を繰り返す|
  
  ## 複数の候補から選択
  - 選択の候補にはメタ文字も使用できる
  |メタ文字|意味|
  |---|---|
  |`(候補1|候補2)`|候補の文字列を`|`で区切る。|
  |`(Good|Bad)+`|候補のどれか１つだけでなく、繰り返されるのはどの候補でもいい。`GoodBadGood`でもマッチする|
  
  ## 文字クラス
  |メタ文字|意味|
  |---|---|
  |`[ABC]`|`[]`内の文字のどれかにマッチング。A,B,Cのいずれか一文字にマッチング|
  |`[a-z]`|連続した文字の指定。複数の範囲を連続して記述できる|
  |`[^0-9]`|否定。例の場合0~9以外の文字とマッチングする|
  |`\\d`|数字を表す略記法。`[0-9]`に相当|
  |`\\D`|数字以外を表す。`[^0-9]`に相当|
  |`\\w`|英数字を表す。`[0-9a-zA-Z_]`に相当。アンダーバーも含まれる|
  |`\\W`|英数字以外を表す。`[^0-9a-zA-Z_]`に相当。|
  |`\\s`|空白を表す。`[\\t\\n\\r\\f]`に相当|
  |`\\S`|空白以外を表す。`[^\\t\\n\\r\\f]`に相当|
  
  ## 後方参照
  - マッチした文字列を後から参照することを後方参照と呼ぶ
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
'''
tags: [
  "正規表現"
]
isStarred: false
isTrashed: false
