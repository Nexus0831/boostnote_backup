createdAt: "2018-05-30T01:31:17.822Z"
updatedAt: "2018-06-12T10:54:56.548Z"
type: "MARKDOWN_NOTE"
folder: "34af9ebfb84cf50e70ae"
title: "暗号化"
content: '''
  # 暗号化
  参考: [Documents/12-Security.md at master · sakapon/Documents · GitHub](https://github.com/sakapon/Documents/blob/master/Education-2013/Body/12-Security.md)
  ## パスワード管理
  - パスワードはランダムが望ましい
  
  ## 暗号化
  - プラットフォームに依存しないのが良い
  - 強度は2018年のもの
  
  ## 前提知識
  - 暗号化ではバイナリデータを変換する
  - 文字列ではなくバイト配列を用いる
  - バイナリ化するエンコーディングはUTF-8で良い
  - バイナリを文字列表現
    - 16進数形式
      - 0~Fの16種類の文字
    - Base64形式
      - 英数字および+/=の65種類の文字
  
  ## 種類
  - ハッシュ関数
    - 一方向であり復元できない
    - パスワード認証に利用
    - 擬似乱数もハッシュの一種
      - seedからハッシュを求める
    - [Xorshiftが面白い](https://ja.wikipedia.org/wiki/Xorshift)
  - 共通鍵
    - 普通にイメージされる暗号化
  - 公開鍵
    - 処理が大きいため単体では利用しない
  - ハイブリット
    - 共通鍵と公開鍵を組み合わせる
    - TLS/SSLで利用される
    - あるいは、TLS/SSLを利用できない環境で暗号化通信を自作する場合
    - keyword: [Let's Encrypt 総合ポータル](https://letsencrypt.jp/)
  
  
  ## よく使う暗号化アルゴリズム
  - ハッシュ関数
    - SHA-256, HMAC-SHA-256
    - RFC 2898
  
  - 共通鍵
    - AES-256, AES-128
      - 実態はRijndael
  
  ## ハッシュ関数
  - パスワードのハッシュ化はWebフレームワーク側でやるのが望ましい
  ### ソルトなし
  - 入力値から一意に決まる
  - 不可逆
  - SHA-256の256はビット数
  
  ### ソルトあり
  - ソルト(Salt)
    - ユーザごとに用意するランダムなデータ
  - ソルトもデータベースに保存する
  - HMAC系統のアルゴリズムを使用する。
  - データベースの列を増やさないために結合して保存する方法もある。
  
  ### パスワード認証
  - 登録時にパスワードのハッシュ化しデータベースに保存
  - ログイン時にパスワードのハッシュを比較
  - 異なるユーザでもパスワードが同じならかぶる
  
  ### RFC 2898
  - ストレッチング
    - ハッシュを繰り返してあえて処理時間を増やす
    - 総当たり攻撃を遅らせる
    - HMAC-SHA-1で10000回
  - ソルト
    - 64ビット以上
    - できれば128ビットが望ましい
  
  ## 共通鍵
  - 鍵をどうやって安全に共有するかの課題がある
  - 初期化ベクトル(Initialization Vector, IV)
    - ソルトとして使う
      - 使わないならゼロ埋めデータ（初期値）を設定すれば良い
      - ハッシュ関数と同様に別途保存
      - または暗号化結果の先頭にソルトを付与
    - 128ビット
  - 暗号利用モード(Block Cipher Mode of Operation)
    - CBCでよい
  - パディング
    - PKCS #7 で良い
  
  - ユーザーが入力したパスワードを鍵とする場合
    - 8文字の人もいれば
    - 15文字の人もいる
    - パスワードのハッシュを鍵とすればよい
  - データが大きい場合、圧縮してから暗号化
    - データの送信や保存を含めた全体を最適化
  
  ## 公開鍵
  - 公開鍵はバレてもおk
    - Base64にした中身は`XML`
  - 秘密鍵はバレたらダメ
    - 正体は公開鍵を含めた内容であり長い
  - SSL証明書には公開鍵の内容が入っている
  
  ## ハイブリッド
  - 共通鍵を公開鍵で暗号化する
  - 元のデータを共通鍵で暗号化する
  - サーバで共通鍵を秘密鍵で復号
  - 元のデータを復元した共通鍵で復元する
  
  ## SSL/TLS
  - ハイブリッド暗号方式を使用
  - 攻撃者は公開鍵と暗号化されたデータしか見えない
  - keyword: ネットワークキャプチャ
  - どこのホストに送ったかはSSLでも見られる
    - ただしホストしかわからず`/archive/`などサブディレクトリは見られない
  - SSLとTLSは同じでありSSLは古いバージョン
  - TLSはハンドシェイクプロトコルを使用する。
  
  ## SSL証明書
  - サブドメインにはワイルド証明書が使える。
  - オレオレ証明書
    - 自分だから信用する
    - 信頼された認証機関からの証明でないと保護された通信にならない
  
  ## Tips
  - 短い名前は価値が高い
  
  ## 認証Cookie
  - ログインを維持するのに使用する。
  - 使用するためにはSSL化とSecure属性を指定する。
  
  ## OAuth
  
  ## SQLインジェクション
  - 対策にはパラメータ化クエリを使う
  
  ## 総当たり攻撃
  - SHA-256とRKS2898では後者の方が前者に比べて1000倍くらいかかる。
  - パスワードは0やa, 9やzなど両端にはしてはいけない。
  
  ## CSRF
  - 危険なリンクを押すと情報が勝手にポストされる。
  
  - 対策
    - トークンを使用する。
  
'''
tags: []
isStarred: false
isTrashed: false
