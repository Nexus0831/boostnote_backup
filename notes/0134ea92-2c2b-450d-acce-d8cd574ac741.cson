createdAt: "2018-04-17T00:28:19.958Z"
updatedAt: "2018-07-23T09:00:22.198Z"
type: "MARKDOWN_NOTE"
folder: "681ce933dcb605096030"
title: "オブジェクト指向設計　試験対策"
content: '''
  # オブジェクト指向設計　試験対策
  
  ## 第１回 オブジェクト指向基本編
  - 開発方法論の主な構成要素には、どのようなものがあるか？
    - アプローチ
    - パラダイム
    - ツール
  - オブジェクトの定義
    - 数えることができ、識別できる。値を持った具体例、インスタンスのこと
  - クラスの定義
    - 同じような性質（属性と操作）を持った、オブジェクトの集合。
  - 抽象化のメリット
    - 複雑さを抑制できる。
  - カプセル化の定義
    - データとそれを処理する操作をまとめて、データを隠すこと。
  - 継承のメリット
    - サブクラスはスーパークラスの属性、操作、関係を引き継ぐため、サブクラス側で定義する必要がないため、冗長な定義を排除できる。
  - 抽象クラスと普通クラスの違い
    - 前者はインスタンスを作れないが、後者はインスタンスを作れない。
  - ポリモーフィズム
    - プログラムのコードから選択構造を排除できる。
    - 選択構造を排除することでテストも容易になる。
  
  ## 第2回 ユースケース図
  - ユースケース図について
    - システムを外から見たときに、システムの主要な振る舞いを明らかにする。
    - システムの提供する機能とシステム外部との関係を明らかにする。
    - システムとシステム外部との境界を明らかにする
  - アクター
    - システムと直接情報のやり取りを行う外部の役割
    - 例）お客様係、配送係
    - アクターの候補
      - システムの利用者
      - システムの外部要素
      - 既存のシステム（クレジットカード決済機能など）
  - ユースケース
    - システムがアクターに対して提供する、アクターにとって価値が認められる粒度の機能
  - 関連
    - アクターとユースケースの紐付けを行う
  - システム境界
    - システム内部と外部の協会を明らかにする
  - アクターの汎化関係
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
'''
tags: []
isStarred: false
isTrashed: false
